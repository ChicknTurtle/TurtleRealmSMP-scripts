
when ready to register custom items:
    set (custom item "turtle:chorium_mirror") to (firework star with nbt from "{""minecraft:item_model"":""turtle:chorium_mirror"",""minecraft:item_name"":""Chorium Mirror"",""minecraft:rarity"":""epic"",""minecraft:max_stack_size"":1}")
    set max damage of (custom item "turtle:chorium_mirror") to 16
    set custom repair items of (custom item "turtle:chorium_mirror") to (custom item "turtle:blazing_pickaxe")
    add custom interact to (custom item "turtle:chorium_mirror")
    set (float tag "minecraft:consumable;consume_seconds" of nbt of (custom item "turtle:chorium_mirror")) to 1.5
    set (string tag "minecraft:consumable;animation" of nbt of (custom item "turtle:chorium_mirror")) to "block"
    apply use cooldown component to (custom item "turtle:chorium_mirror"):
        seconds: 10 seconds
        group: "turtle:chorium_mirror"
    set component lore of (custom item "turtle:chorium_mirror") to getLore()
    set (kept lore amount of (custom item "turtle:chorium_mirror")) to 1

when ready to load recipes:
    register smithing transform recipe:
        id: "turtle:chorium_mirror_smithing"
        result: custom item "turtle:chorium_mirror"
        template: custom item "turtle:chorium_upgrade_smithing_template"
        base: custom item "turtle:magnifying_glass"
        addition: custom item "turtle:chorium_ingot"

local function getLore(loc:location={_}) :: objects:
    set {_c1} to (text component from "§fUnbound")
    set (italic format of {_c1}) to false

    # description
    set {_c2} to (text component from "§7Save a location and teleport to it from anywhere")
    set (italic format of {_c2}) to false
    
    return ({_c1}, {_c2})

local function updateItem(item:item) :: item:
    set {_loc} to getMirrorLoc(compound tag "mirrorLoc" of (custom nbt of {_item}))
    # lore
    if {_loc} isn't set:
        set {_c} to (text component from "§fUnbound")
    else:
        set {_c} to (text component from "§fBound to: §d%floor(x-coord of {_loc})%§5,§d%floor(y-coord of {_loc})%§5,§d%floor(z-coord of {_loc})%")
    set (italic format of {_c}) to false
    set (line 1 of component lore of {_item}) to {_c}
    
    return updated {_item}

local function getMirrorLoc(mirrorLoc:nbtcompound) :: location:
    {_mirrorLoc} is set
    set {_pos::*} to (int array tag "pos" of {_mirrorLoc})
    set {_world} to (world from key (string tag "dimension" of {_mirrorLoc}))
    set {_loc} to location(1st element of {_pos::*},2st element of {_pos::*},3st element of {_pos::*},{_world})
    return {_loc}
local function mirrorTp(p:player,loc:location):
    set {_beforeloc} to ({_p}'s location)
    set (yaw of {_loc}) to (yaw of {_p})
    set (pitch of {_loc}) to (pitch of {_p})
    set {_v} to vehicle of {_p}
    if {_v} is set:
        make {_p} dismount
        wait 1 tick
        teleport {_v} to {_loc} while retaining (vehicle,passengers,yaw and pitch velocity)
        teleport {_p} to {_loc} while retaining (vehicle,passengers,yaw and pitch velocity)
        wait 1 tick
        make {_p} ride {_v}
    else:
        teleport {_p} to {_loc} while retaining (vehicle,passengers,yaw and pitch velocity)
    play sound "minecraft:entity.illusioner.mirror_move" in player category at {_beforeloc}
    play sound "minecraft:block.portal.travel" in player category with volume 0.25 at {_p}
    make 100 of end rod at {_beforeloc} with extra 0.25
    make 100 of portal at {_p}
    # apply cooldown after tp so it is visible on client
    {_p}.setCooldown((custom item "turtle:chorium_mirror"), floor(20*(float tag "minecraft:use_cooldown;seconds" of nbt of (custom item "turtle:chorium_mirror"))))

on custom item interact with "turtle:chorium_mirror":
    set {_mirror} to (player's offhand tool) if (event-equipmentslot is off hand slot) else (player's tool)
    if durability of {_mirror} <= 1:
        play sound "minecraft:item.ominous_bottle.dispose" in player category at player
        exit
    set {_mirrorLoc} to (compound tag "mirrorLoc" of (custom nbt of {_mirror}))
    if ({_mirrorLoc} ? empty nbt compound) is (empty nbt compound):
        # bind location
        set {_mirrorLoc} to (empty nbt compound)
        set {_loc} to (player's location)
        set (int array tag "pos" of {_mirrorLoc}) to (floor(x-coord of {_loc}),floor(y-coord of {_loc}),floor(z-coord of {_loc}))
        set (string tag "dimension" of {_mirrorLoc}) to "%event-world.getKey()%"
        set (compound tag "mirrorLoc" of (custom nbt of {_mirror})) to {_mirrorLoc}
        set (boolean tag "hasMirrorLoc" of (custom nbt of {_mirror})) to true
        play sound "minecraft:entity.illusioner.prepare_mirror" in player category at player
        make 25 of end rod at player with extra 0.1
    else:
        # tp
        mirrorTp(player, getMirrorLoc({_mirrorLoc}))
        player's gamemode isn't creative
        durability of {_mirror} > 1
        chance of (1/((level of unbreaking of {_mirror} ? 0)+1))
        damage {_mirror} by 1
    # update item
    set {_mirror} to updateItem({_mirror})
    if (event-equipmentslot is off hand slot):
        set player's offhand tool to {_mirror}
    else:
        set player's tool to {_mirror}
