
import:
    org.bukkit.Bukkit
    org.bukkit.event.inventory.BrewEvent
    org.bukkit.event.inventory.PrepareInventoryResultEvent

# Initializing custom items

on skript start:
    loadCustomItems()
    loadAllRecipes()
local function loadAllRecipes():
    log info "‍🔥 Loading custom recipes..."
    Bukkit.resetRecipes()
    call custom event "recipesReady"
    unlock recipes all recipes for all players
    update server recipes
    log info "Loaded &b%size of all recipes% &rrecipes."
local function loadCustomItems():
    clear {-customItems::*}
    log info "‍🔥 Loading custom items..."
    call custom event "customItemsReady"
    set {_s} to "" if (size of {-customItems::*} is 1) else "s"
    log info "Loaded &b%size of {-customItems::*}% &rcustom item%{_s}%."

# Custom items command
brig command tree /turtle:customitems:
    permission: op
    aliases: ci
    literal arg "give":
        players arg "players":
            namespacedkey arg "item":
                suggestions:
                    apply suggestion (indexes of {-customItems::*})
                optional int arg "count" with min 1 and max 6400:
                    trigger:
                        set {_item} to {_item} ? ""
                        set {_count} to {_count} ? 1
                        if {-customItems::%{_item}%} isn't set:
                            send "§cUnknown custom item '%{_item}%'" to command sender
                            stop
                        set {_customItem} to {-customItems::%{_item}%}
                        give or drop {_count} of {_customItem} to {_players::*}
                        set {_c::1} to (text component from "Gave %{_count}% ")
                        set {_c::2} to (item chat component of {_customItem})
                        set {_c::3} to (text component from " to ")
                        set {_c::3} to (text component from " to ")
                        if (size of {_players::*}) > 1:
                            set {_c::4} to (text component from "%size of {_players::*}% players")
                        else:
                            set {_c::4} to playerComponent(first element of {_players::*})
                        send components (merge components {_c::*}) to command sender
    literal arg "reload":
        literal arg "items":
            trigger:
                send "§fReloading all custom items..." to command sender
                loadCustomItems()
                send "§aFinished reloading custom items!" to command sender
        literal arg "recipes":
            trigger:
                send "§fReloading all recipes..." to command sender
                loadAllRecipes()
                send "§aFinished reloading recipes!" to command sender
        literal arg "all":
            trigger:
                send "§fReloading all custom items and recipes..." to command sender
                loadCustomItems()
                send "§bFinished reloading custom items..." to command sender
                loadAllRecipes()
                send "§aFinished reloading recipes!" to command sender
        trigger:
            send "§fReloading all custom items and recipes..." to command sender
            loadCustomItems()
            send "§bFinished reloading custom items..." to command sender
            loadAllRecipes()
            send "§aFinished reloading recipes!" to command sender

# Effects and expressions for handling custom items

# Add custom interact nbt to an item
effect:
    patterns:
        add custom interact[ion] [nbt] to %item%
        give %item% [a] custom interact[ion] [nbt]
        set custom interact[ion] of %item% to (true|on|enabled)
    trigger:
        set {_item} to expr-1
        set (compound tag "consumable" of (nbt of {_item})) to (nbt compound from "{consume_seconds:0.05,animation:""none"",sound:{sound_id:""""},has_consume_particles:false,on_consume_effects:[{type:""minecraft:play_sound"",sound:{sound_id:""""}}]}")
        apply food component to {_item}:
            nutrition: 0
            saturation: 0
            can_always_eat: true
        set (boolean tag "customItems;hasCustomInteract" of (custom nbt of {_item})) to true
        set raw expression expr-1 to {_item}

# Set 'remove nbt tags' of an item
# These tags will be forcefully removed from the item when it is updated
plural expression:
    return type: strings
    loop of: tag
    patterns:
        remove nbt [strings|tags] of %item%
        %item%'s remove nbt [strings|tags]
    get:
        return (string list tag "customItems;removeNbt" of (custom nbt of (expr-1)))
    set:
        set {_item} to expr-1
        set (string list tag "customItems;removeNbt" of (custom nbt of {_item})) to (change values)
        set (raw expression expr-1) to {_item}

# Set 'kept lore amount' of an item
# This number of lore lines will be retained when the item is updated
expression:
    return type: integer
    patterns:
        kept (lore|tooltip) (lines|amount) of %item%
        %item%'s kept (lore|tooltip) (lines|amount)
    get:
        return (int tag "customItems;keepLore" of (custom nbt of (expr-1)))
    set:
        set {_item} to expr-1
        set (int tag "customItems;keepLore" of (custom nbt of {_item})) to (change value)
        set (raw expression expr-1) to {_item}

# Get all custom items
plural expression:
    return type: item
    loop of: item
    patterns:
        all [[of] the] [registered|defined] custom items
    get:
        return {-customItems::*}

# Get/define/delete a custom item
expression:
    return type: item
    patterns:
        custom item [with id|named] %string%
    get:
        set {_id} to namespaced key from expr-1
        if {_id} isn't set:
            log error "Error retrieving custom item: '%expr-1%' isn't a valid namespaced key."
            return
        if {-customItems::%{_id}%} is set:
            return {-customItems::%{_id}%}
        else if (itemtype from key {_id}) is set:
            return itemtype from key {_id}
        return
    set:
        set {_id} to namespaced key from expr-1
        if {_id} isn't set:
            log error "Error registering custom item: '%expr-1%' isn't a valid namespaced key."
            stop
        # convert itemstack/itemtype/slot to itemstack
        set {_item} to change value
        set {_item} to try {_item}.getRandom() ? {_item}
        set {_item} to try {_item}.getItem() ? {_item}
        if {_item} isn't instance of item:
            log error "Error registering custom item %{_id}%: Cannot define '%change value%' (%skript type of (change value)%) as a custom item, as it is not an item."
            stop
        if {_item} is air:
            log error "Error registering custom item %{_id}%: Cannot define air as a custom item."
            stop
        set item id of {_item} to "%{_id}%"
        set {-customItems::%{_id}%} to {_item}
        log debug "Registered custom item &a%{_id}%"
    delete:
        set {_id} to namespaced key from expr-1
        if {_id} isn't set:
            log error "Error deleting custom item: '%expr-1%' isn't a valid namespaced key."
            stop
        delete {-customItems::%{_id}%}

# Get/set/delete the custom id of an item
item property item id:
    return type: string
    get:
        set {_id} to (string tag "customItems;id" of (custom nbt of expr-1))
        return {_id} if {_id} is set else (raw name of expr-1)
    set:
        set {_item} to expr-1
        set (string tag "customItems;id" of (custom nbt of {_item})) to change value
        set (raw expression expr-1) to {_item}
    delete:
        set {_item} to expr-1
        delete (string tag "customItems;id" of (custom nbt of {_item}))
        set (raw expression expr-1) to {_item}

# Update an item based on its custom id
expression:
    patterns:
        updated [[custom] item] %item%
    get:
        set {_item} to expr-1
        if {_item} ? air is air:
            return {_item}
        # update legacy items
        if (string tag "customId" of (custom nbt of {_item})) is set:
            set (string tag "customItems;id" of (custom nbt of {_item})) to (string tag "customId" of (custom nbt of {_item}))
            delete (string tag "customId" of (custom nbt of {_item}))
        # kept lore
        set {_keepLore} to (int tag "customItems;keepLore" of (custom nbt of {_item}))
        if {_keepLore} is set:
            set {_keptLore::*} to (first {_keepLore} elements of (component lore of {_item}))
        # update nbt
        set {_rawitem} to (custom item (item id of {_item})) ? {_item}
        if (int tag "minecraft:damage" of (nbt of {_item})) is 0:
            (int tag "minecraft:damage" of (vanilla nbt of {_rawitem})) isn't set
            delete (int tag "minecraft:damage" of (nbt of {_item}))
        set {_newitem} to (item amount of {_item}) of (type of {_rawitem})
        add nbt of {_item} to nbt of {_newitem}
        add nbt of {_rawitem} to nbt of {_newitem}
        # finalize
        loop (string list tag "customItems;removeNbt" of (custom nbt of {_rawitem})):
            delete tag loop-value of (nbt of {_newitem})
        if {_keepLore} is set:
            loop {_keepLore} times:
                set (line loop-iteration of component lore of {_newitem}) to {_keptLore::%loop-iteration%}
        return {_newitem}
effect:
    patterns:
        update [[custom] item] %item%
    trigger:
        set (raw expression expr-1) to (updated expr-1)

# Handle existing custom items

# Custom interact behavior
on consume with priority lowest:
    set {_item} to event-item
    (boolean tag "customItems;hasCustomInteract" of (custom nbt of {_item})) is true
    cancel event
    set event-item to {_item}
    try player.setCooldown(event-item, floor(20*(float tag "minecraft:use_cooldown;seconds" of nbt of event-item)))
    set {_eventValues::player} to event-player
    set {_eventValues::item} to event-item
    set {_eventValues::world} to event-world
    set {_eventValues::string} to (item id of event-item)
    set {_eventValues::equipmentslot} to event.getHand()
    call custom event "customItemInteract" using event-values {_eventValues::*}

on entity add to world:
    event-entity is a dropped item
    update item (item of event-entity)

# player joining
on join:
    loop (amount of slots of player) times:
        update (slot (loop-value)-1 of player)
# /give etc
# doesn't work well when in creative
on inventory slot change:
    player's gamemode isn't creative
    event-slot isn't air
    update event-slot
# chest loot generating
on loot generate:
    loop loot:
        add (updated loop-value) to {_newloot::*}
    set loot to {_newloot::*}
# crafting
on preparing craft:
    update event-slot
# smelting
# updating result blocks more items from being smelted
#on smelt:
#    update smelted item
# anvil, grindstone, smithing
on PrepareInventoryResultEvent:
    event.setResult(updated event.getResult())
# brewing
on BrewEvent:
    set {_block} to event.getBlock()
    loop ...event.getResults():
        event.getResults().set((loop-iteration)-1, updated loop-value)
