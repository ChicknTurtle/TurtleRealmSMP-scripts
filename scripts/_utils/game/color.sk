
# Returns a number of the decimal value of the input, as a positive integer
# Made by Sovde, modified by ChicknTurtle
function hexToDecimal(hex:string) :: number:
    if first character of {_hex} is "#":
        set {_hex} to (substring of {_hex} from index 2 to index (length of {_hex}))
    set {_i} to 0 # make parser happy
    loop reversed (split uppercase {_hex} at ""):
        set {_result} to {_result} + (first index of loop-value in "0123456789ABCDEF" - 1) * 16 ^ ({_i} - 1)
        add 1 to {_i}
    return {_result}

import:
    java.lang.String as javaString
    java.awt.Color as javaColor
function rgbToHex(r:integer, g:integer, b:integer) :: string:
    return javaString.format("#%%02X%%02X%%02X", [{_r},{_g},{_b}])
function hexToColor(hex:string) :: color:
    set {_c} to javaColor.decode({_hex})
    return rgb({_c}.getRed(),{_c}.getGreen(),{_c}.getBlue())

# Get the dye color string from a color object
# e.g. light green > "lime"
expression:
    patterns:
        [the] [dye] color str[ing] (of|from) %color%
        %color%'s [dye] color str[ing]
    get:
        if expr-1 is gray:
            return "light gray"
        else if expr-1 is dark gray:
            return "gray"
        else if expr-1 is light green:
            return "lime"
        else if expr-1 is light cyan:
            return "light blue"
        return expr-1

# Get the color of a colored item from item name
# Supports custom item ids
expression:
    patterns:
        [the] dye color (of|from) %itemstack%
        %itemstack%'s dye color
    get:
        set {_id} to (last element of ((item id of expr-1) split at ":"))
        replace "_" with " " in {_id}
        set {_colors::*} to "black", "white", "light gray", "gray", "brown", "red", "orange", "yellow", "lime", "green", "cyan", "light blue", "blue", "purple", "magenta", "pink"
        sort {_colors::*} by length of input
        loop {_colors::*}:
            if {_id} is loop-value:
                set {_return1} to loop-value
                exit loop
            if {_id} starts with "%loop-value% ":
                set {_return2} to loop-value
            if {_id} ends with " %loop-value%":
                set {_return3} to loop-value
        set {_return1} to (dark gray if {_return1} is "gray" else ({_return1} parsed as color))
        set {_return2} to (dark gray if {_return2} is "gray" else ({_return2} parsed as color))
        set {_return3} to (dark gray if {_return3} is "gray" else ({_return3} parsed as color))
        return {_return1} ? {_return2} ? {_return3}

# Ping color
# Get a color based on the ping value
# Based on functionality from Better Ping Display mod
expression:
    patterns:
        ping color (of|from) %integer%
        %integer%'s ping color
    get:
        set {_ping} to expr-1
        set {_PING_START} to 0
        set {_PING_MID} to 150
        set {_PING_END} to 300

        set {_COLOR_GREY} to rgb(83, 83, 83)
        set {_COLOR_START} to rgb(0, 230, 118)
        set {_COLOR_MID} to rgb(214, 205, 48)
        set {_COLOR_END} to rgb(229, 57, 53)

        if ({_ping} < {_PING_START}):
            return {_COLOR_GREY}
        else if ({_ping} < {_PING_MID}):
            return interpolate({_COLOR_START}, {_COLOR_MID}, computeOffset({_PING_START}, {_PING_MID}, {_ping}))
        else:
            return interpolate({_COLOR_MID}, {_COLOR_END}, computeOffset({_PING_MID}, {_PING_END}, min({_ping}, {_PING_END})))

local function computeOffset(start:integer, end:integer, value:integer) :: number:
    set {_offset} to ({_value}-{_start}) / ({_end}-{_start})
    return max(0, min(1, {_offset}))

local function interpolate(color1:color, color2:color, offset:number) :: color:
    set {_r} to ({_color1}.getRed() + ({_color2}.getRed() - {_color1}.getRed()) * {_offset})
    set {_g} to ({_color1}.getGreen() + ({_color2}.getGreen() - {_color1}.getGreen()) * {_offset})
    set {_b} to ({_color1}.getBlue() + ({_color2}.getBlue() - {_color1}.getBlue()) * {_offset})
    return rgb({_r}, {_g}, {_b})
