
import:
    net.minecraft.core.component.DataComponents

# Item Rarity
# Get the rarity of an item
expression:
    patterns:
        [the] [item] rarity of %item%
        %item%'s [item] rarity
    get:
        # can't use nbt, not thread safe
        return lowercase "%(1 of expr-1).handle.getComponents().get(DataComponents.RARITY)%"
    set:
        set (string tag "minecraft:rarity" of (nbt of raw expr-1)) to (change value)

# Rarity Color
# Get the rarity color of an item
expression:
    patterns:
        [the] rarity color of %item%
        %item%'s rarity color
    get:
        set {_rarity} to rarity of expr-1
        if expr-1 is enchanted:
            if {_rarity} isn't "epic":
                return rgb(85,255,255)
        if {_rarity} is "uncommon":
            return rgb(255,255,85)
        else if {_rarity} is "rare":
            return rgb(85,255,255)
        else if {_rarity} is "epic":
            return rgb(255,85,255)
        else:
            return rgb(255,255,255)

# Effective name of item
expression:
    patterns:
        [the] (effective|shown) [item] name of %item%
        %item%'s (effective|shown) [item] name
    get:
        set {_item} to expr-1
        if {_item} is air:
            set {_c} to (translate component from (translation key of {_item}))
        if name of {_item} is set:
            set {_c} to (text component from (name of {_item}))
        else if (try {_item}.getItemMeta().hasItemName()):
            set {_c} to (component item name of {_item})
        else:
            set {_c} to (translate component from (translation key of {_item}))
        return {_c}

# Item chat component
# Mimics how minecraft displays items in chat
expression:
    patterns:
        [the] [item] chat component of %item%
        %item%'s [item] chat component
    get:
        set {_col} to (rarity color of expr-1)
        set {_name} to (effective item name of expr-1)
        set {_c} to (merge components (text component from "["), {_name}, (text component from "]"))
        set (color format of {_c}) to {_col}
        set (hover event of {_c}) to (hover event showing expr-1)
        return {_c}

# Effective name of entity
expression:
    patterns:
        [the] (effective|shown) [entity] name of %entity%
        %entity%'s (effective|shown) [entity] name
    get:
        set {_e} to expr-1
        # get real name
        set {_real_name} to (translate component from (translation key of {_e}))
        # get custom name
        set {_custom_name} to (custom name of {_e})
        # get variant/extra name
        set {_variant} to (try {_e}.getVariant())
        if {_e} is a horse or donkey or mule or llama or skeleton horse or zombie horse or camel:
            delete {_variant}
        set {_extra} to {_variant} ? (try {_e}.getCatType()) ? (try {_e}.getColor()) ? (try {_e}.getCombinedGene()) ? ("screaming" if (try {_e}.isScreaming() is true) else {_}) ? ((translate component from (villager profession of {_e}).translationKey()) if (villager profession of {_e} isn't (no profession)) else "Unemployed")
        if any:
            try {_e}.isBaby() is true
            (age of {_e}) < 0
        then:
            if {_extra} is set:
                set {_extra} to "baby %{_extra}%"
            else:
                set {_extra} to "baby"
        if {_extra} is set:
            if (try {_extra}.getKey()) is set:
                set {_extra} to {_extra}.getKey().getKey()
            set {_extra} to "%{_extra}%"
            replace "_" with " " in {_extra}
            set {_extra} to (strict proper case {_extra})
            set {_mob_name} to merge components "%{_extra}% ", {_real_name}
        else:
            set {_mob_name} to {_real_name}
        
        if {_custom_name} is set:
            return "%{_custom_name}% (%{_mob_name}%)"
        else:
            return "%{_mob_name}%"
