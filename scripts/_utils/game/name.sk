
import:
    net.minecraft.core.component.DataComponents

# Item Rarity
# Get the rarity of an item
expression:
    patterns:
        [the] [item] rarity of %item%
        %item%'s [item] rarity
    get:
        return "%(1 of expr-1).handle.getComponents().get(DataComponents.RARITY)%"
    set:
        set string tag "minecraft:rarity" of nbt of raw expr-1 to change value

# Effective name
# Get the effective name of an item or entity
# Result may contain translate components
expression:
    patterns:
        [the] (effective|real) [item] name of %item%
        %item%'s (effective|real) [item] name
    get:
        set {_item} to expr-1
        if {_item} is air:
            return translate component from (translation key of {_item})
        if name of {_item} is set:
            return (name of {_item}) + "§r"
        else if (try {_item}.getItemMeta().hasItemName()):
            return (component item name of {_item}) + "§r"
        else:
            return translate component from (translation key of {_item})
expression:
    patterns:
        [the] (effective|real) [entity] name of %entity%
        %entity%'s (effective|real) [entity] name
    get:
        set {_e} to expr-1
        set {_real_name} to (translate component from (translation key of {_e}))
        set {_custom_name} to (custom name of {_e})
        set {_variant} to (try {_e}.getVariant()) ? (try {_e}.getCatType()) ? (try {_e}.getColor()) ? (try {_e}.getCombinedGene()) ? ((translate component from (villager profession of {_e}).translationKey()) if (villager profession of {_e} isn't (no profession)) else "Unemployed")
        if {_variant} is set:
            if (try {_variant}.getKey()) is set:
                set {_variant} to {_variant}.getKey().getKey()
            set {_variant} to (strict proper case str({_variant}))
            set {_mob_name} to merge components "%{_variant}% ", {_real_name}
        else:
            set {_mob_name} to {_real_name}
        if {_custom_name} is set:
            return "%{_custom_name}% (%{_mob_name}%)"
        else:
            return "%{_mob_name}%"

# Item chat component
# Mimics how minecraft displays items in chat
expression:
    patterns:
        [the] [item] chat component of %item%
        %item%'s [item] chat component
    get:
        set {_col} to rarity color of expr-1
        set {_name} to (effective item name of expr-1)
        set {_c} to (merge components (text component from "["), {_name}, (text component from "]"))
        set color format of {_c} to {_col}
        set hover event of {_c} to hover event showing expr-1
        return {_c}

# Rarity Color
# Get the rarity color of an item
expression:
    patterns:
        [the] rarity color of %item%
        %item%'s rarity color
    get:
        set {_rarity} to rarity of expr-1
        if expr-1 is enchanted:
            if {_rarity} isn't "EPIC":
                return rgb(85,255,255)
        if {_rarity} is "UNCOMMON":
            return rgb(255,255,85)
        else if {_rarity} is "RARE":
            return rgb(85,255,255)
        else if {_rarity} is "EPIC":
            return rgb(255,85,255)
        else:
            return rgb(255,255,255)
