
import:
    net.minecraft.resources.ResourceLocation
    net.minecraft.core.registries.BuiltInRegistries

# namespacedkey -> ResourceLocation
function nmsKey(key:namespacedkey) :: object:
    return new ResourceLocation({_key}.getNamespace(),{_key}.getKey())

# string (key) -> DataComponentType
function getNmsComponentType(type:string) :: object:
    set {_key} to (namespaced key from "%{_type}%")
    {_key} is set
    return BuiltInRegistries.DATA_COMPONENT_TYPE.get(nmsKey({_key})).get().value()

# compound + path -> nmsTag
function getNmsTag(compound:nbtcompound, path:string) :: object:
    set {_nmsCompound} to {_compound}.getCompound()
    set {_path::*} to ({_path} split at ";")
    loop {_path::*}:
        set {_nmsCompound} to {_nmsCompound}.get(loop-value)
    return {_nmsCompound}

# compound + path + value = change compound -> nmsCompound
function setNmsTag(compound:nbtcompound, path:string, value:object) :: object:
    set {_nmsCompound} to {_compound}.getCompound()
    set {_path::*} to ({_path} split at ";")
    set {_current} to {_nmsCompound}
    loop {_path::*}:
        if loop-iteration is (size of {_path::*}):
            {_current}.put(loop-value, {_value})
        else:
            if {_current}.contains(loop-value):
                set {_current} to {_current}.get(loop-value)
            else:
                {_current}.put(loop-value, (empty nbt compound.getCompound()))
                set {_current} to {_current}.get(loop-value)
    return {_nmsCompound}

# item + component name + compound = set component and return
# ONLY works for components with a put() method like custom_data
function setNmsItemTag(item:item, component:string, path:string, value:object) :: item:
    set {_nmsItem} to {_item}.asNMSCopy()
    set {_componentType} to getNmsComponentType({_component})
    set {_rootCompound} to {_nmsItem}.get({_componentType}) ? (empty nbt compound.getCompound())
    set {_path::*} to ({_path} split at ";")
    set {_current} to {_rootCompound}
    loop {_path::*}:
        if loop-iteration is (size of {_path::*}):
            {_current}.put(loop-value, {_value})
        else:
            if {_current}.contains(loop-value) is false:
                {_current}.put(loop-value, (empty nbt compound.getCompound()))
            set {_current} to {_current}.get(loop-value)

    {_nmsItem}.set({_componentType}, {_rootCompound})
    return {_nmsItem}.asBukkitCopy()

# used to bypass errors like: "Tried to load invalid item: 'No key rules in MapLike[{}] missed input: {"minecraft:tool":{}}"
# done by setting entire nbt of the item at once, instead of adding to the nbt
function setNbt(item:item, nbttype:nbttype, path:string, value:object) :: item:
    # detatch nbt var from the item
    set {_nbt} to nbt from "%nbt of {_item}%"
    # don't check if already the same for compound tags, to avoid errors
    if {_nbttype} is compound tag:
        set {_nbttype} {_path} of {_nbt} to {_value}
    else:
        # no need to set nbt if it is already the same
        {_nbttype} {_path} of vanilla nbt of {_item} isn't {_value}
        set {_nbttype} {_path} of {_nbt} to {_value}
    # build new item
    set {_newitem} to (type of {_item}) with nbt {_nbt}
    return {_newitem}
