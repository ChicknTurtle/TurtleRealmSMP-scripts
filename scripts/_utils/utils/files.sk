
import:
    java.io.File as javaFile

function getFileName(filename:string) :: string:
    set {_name::*} to {_filename} split at "."
    return (join (first (size of {_name::*} - 1) elements of {_name::*}) with ".")

function getFileExt(filename:string) :: string:
    if {_filename} doesn't contain ".":
        return ""
    return last element of ({_filename} split at ".")

local function getFiles(dir:string) :: strings:
    set {_dir} to new javaFile({_dir})
    loop ...{_dir}.listFiles() where [input.isFile()]:
        add loop-value.getPath() to {_return::*}
    return {_return::*}

local function getFilesRecursive(dir:string) :: strings:
    set {_dir} to new javaFile({_dir})
    loop ...{_dir}.listFiles():
        if loop-value.isDirectory():
            add getFilesRecursive(loop-value.getPath()) to {_return::*}
        else:
            add loop-value.getPath() to {_return::*}
    return {_return::*}    

plural expression:
    patterns:
        [all] [:recursive] files in [folder|directory] %string%
    loop of: file
    get:
        if parse tags contains "recursive":
            return getFilesRecursive(expr-1)
        else:
            return getFiles(expr-1)
