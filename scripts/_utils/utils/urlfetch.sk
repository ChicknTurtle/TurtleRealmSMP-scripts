
import:
    java.io.BufferedReader
    java.io.InputStreamReader
    java.math.BigInteger
    java.net.HttpURLConnection
    java.net.URL
    java.nio.file.Files
    java.nio.file.Paths
    java.nio.file.StandardCopyOption
    java.security.DigestInputStream
    java.security.MessageDigest
    java.lang.String as javaString

function asyncDownloadFile(url:string, path:string):
    async run 0 ticks later:
        downloadFile({_url}, {_path})

function hashFromUrl(url:string) :: string:
    set {_sha1} to MessageDigest.getInstance("SHA-1")
    set {_input} to new URL({_url}).openStream()
    set {_digestStream} to new DigestInputStream({_input}, {_sha1})
    set {_tempFile} to Files.createTempFile("tempHashFile-", ".tmp")
    Files.copy({_digestStream}, {_tempFile}, StandardCopyOption.REPLACE_EXISTING)
    {_digestStream}.close()
    {_input}.close()
    Files.deleteIfExists({_tempFile})
    set {_digest} to {_sha1}.digest()
    return javaString.format("%%040x", new BigInteger(1, {_digest}))

function downloadFile(url:string, path:string):
    set {_stream} to new URL({_url}).openStream()
    Files.copy({_stream}, Paths.get("%{_path}%"), StandardCopyOption.REPLACE_EXISTING)

# Get content of an url
# Will block main thread of server if not used in an async section
plural expression:
    patterns:
        (lines|content) of (url|link|[web]site) %string% [with time[ |-]out %-timespan%]
        urlfetch %string% [with time[ |-]out %-timespan%]
    loop of: line
    get:
        set {_url} to expr-1
        set {_timeout} to expr-2 ? 1 second
        set {_timeout} to (50 * ticks of {_timeout})

        set {_urlobject} to try new URL({_url})
        set {_con} to {_urlobject}.openConnection()
        {_con}.setRequestMethod("GET")
        {_con}.setRequestProperty("User-Agent", "Skript/Reflect")
        {_con}.setConnectTimeout({_timeout})
        {_con}.setReadTimeout({_timeout})
        set {_responseCode} to try {_con}.getResponseCode()
        if {_responseCode} isn't set:
            log warn "Failed to fetch url %{_url}%%nl%%last java error%"
            {_con}.disconnect()
            return {_}
        if ({_responseCode} is HttpURLConnection.HTTP_OK):
            set {_stream} to {_con}.getInputStream()
            set {_reader} to new InputStreamReader({_stream})
            set {_buffer} to new BufferedReader({_reader})
            set {_line} to {_buffer}.readLine()
            while {_line} is set:
                add {_line} to {_response::*}
                set {_line} to {_buffer}.readLine()
            {_buffer}.close()
            {_reader}.close()
        else:
            log warn "Failed to fetch url %{_url}%%nl%ERROR?: %last java error%"
        {_con}.disconnect()

        return {_response::*} ? {_}
