
# Facing of location
# Get the cardinal direction of a location
expression:
    patterns:
        [the] facing of [loc[ation]] %location%
        [loc[ation]] %location%'[s] facing
    get:
        return (facing of vector (vector from expr-1 to (location 1 block in front of expr-1)))

# Facing of vector
# Get the cardinal direction of a vector
expression:
    patterns:
        [the] [:horizontal] facing of [vector] %vector%
        [vector] %vector%'[s] [:horizontal] facing
    get:
        set {_horizontal} to (true if parse tags contains "horizontal" else false)
        set {_x} to x of expr-1
        set {_y} to y of expr-1
        set {_z} to z of expr-1
        if {_horizontal} is false:
            if all:
                abs({_y}) >= abs({_x})
                abs({_y}) >= abs({_z})
            then:
                if {_y} > 0:
                    return up
                else:
                    return down
        if abs({_x}) >= abs({_z}):
            if {_x} > 0:
                return east
            else:
                return west
        else:
            if {_z} > 0:
                return south
            else:
                return north

# Vector of direction
# Get a vector from a cardinal direction
# Because skript's expression is broken https://skripthub.net/docs/?id=10169
expression:
    patterns:
        [the] vector (of|from) dir[ection] %direction%
    get:
        return expr-1.getDirection()

# Randomly rotate a vector within a cone
expression:
    patterns:
        [vector] %vector% spread [randomly] by %number% [deg[rees]]
    get:
        set {_v} to expr-1
        set {_maxAngle} to expr-2
        set {_axis} to vector(0-(z of {_v}), 0, (x of {_v}))
        set {_phi} to (random number from 0 to 360)
        rotate {_axis} around {_v} by {_phi}
        set {_theta} to (random number from 0 to {_maxAngle})
        rotate {_v} around {_axis} by {_theta}
        return {_v}
