
import:
    io.papermc.paper.event.block.BlockPreDispenseEvent
    org.bukkit.entity.Animals
    org.bukkit.entity.ChestedHorse

on load:
    set {-features::dispensers::name} to "Dispensers"
    set {-features::dispensers::desc} to "Adds more functionality to dispensers, such\nas placing blocks, breeding mobs, and\ncompatibility with Bonemealing feature"
    set {-features::dispensers::icon} to dispenser

local function dispenserBonemeal(event:object):
    {_event}.setCancelled(true)
    remove 1 bone meal from (slot {_event}.getSlot() of inventory of {_event}.getBlock())
    dispenserEvent({_event}.getBlock())

on BlockPreDispenseEvent:
    {enabledFeatures::dispensers} is true
    set {_dispenser} to event.getBlock()
    set {_item} to event.getItemStack()
    set {_front_block} to (block in front of {_dispenser})
    # bonemealing
    if {_item} is bone meal:
        {enabledFeatures::bonemealing} is true
        # vertical growth block
        if (sugar cane, cactus) contains (type of {_front_block}):
            bonemealVerticalGrowthBlock({_front_block}) is true
            dispenserBonemeal(event)
        # crop block
        else if (nether wart) contains (type of {_front_block}):
            bonemealCropBlock({_front_block}) is true
            dispenserBonemeal(event)
        # stem block
        else if (pumpkin stem, melon stem) contains (type of {_front_block}):
            bonemealStemBlock({_front_block}) is true
            dispenserBonemeal(event)
        # single tick block
        else if (chorus flower) contains (type of {_front_block}):
            bonemealSingleTickBlock({_front_block}) is true
            dispenserBonemeal(event)
        # flower block
        else if (tag values of block tag "small_flowers" where [(wither rose, torchflower) doesn't contain input]) contains (type of {_front_block}):
            bonemealFlowerBlock({_front_block}) is true
            dispenserBonemeal(event)
        exit trigger
    # breeding
    set {_e::*} to (entities touching {_front_block}) where [input is instance of Animals]
    set {_e::*} to {_e::*} where [input.isBreedItem({_item}) is true]
    if size of {_e::*} > 0:
        # cancel if any valid mobs are there, even if they can't breed right now
        cancel event
        set {_e::*} to {_e::*} where [input can breed]
        set {_e::*} to {_e::*} where [love time of input is 0 seconds]
        set {_e} to first element of {_e::*}
        if {_e} is set:
            dispenserEvent({_dispenser})
        else:
            dispenserEventFail({_dispenser})
            exit trigger
        # set love mode, remove item
        remove 1 of {_item} from (slot event.getSlot() of inventory of {_dispenser})
        set love time of {_e} to 30 seconds
        play entity effect love_hearts on {_e}
        exit trigger
    # placing blocks
    set {_blockdata} to (item blockdata of {_item})
    if {_blockdata} is set:
        # blacklist items that already have custom dispense behavior
        if any:
            {_item} is powder snow bucket
            {_item} is tagged with (block tag "shulker_boxes")
            {_item} is tnt
        then:
            exit trigger
        if (entities touching {_front_block}) where [try input.getHandle().canEquipWithDispenser({_item}.asNMSCopy())] is set:
            exit trigger
        set {_chestedHorses::*} to (entities touching {_front_block}) where [input is instance of ChestedHorse]
        if {_chestedHorses::*} is set:
            {_chestedHorses::*} where [input.isTamed() is true] is set
            {_chestedHorses::*} where [input.isCarryingChest() is false] is set
            exit trigger
        if {_item} is glowstone:
            {_front_block} is respawn anchor
            exit trigger
        cancel event
        set {_loc} to location of {_front_block}
        set (yaw of {_loc}) to (yaw of {_dispenser}) + 180
        set (pitch of {_loc}) to (pitch of {_dispenser}) * -1
        if placing {_item} at {_loc} succeeded:
            dispenserEvent({_dispenser})
            remove 1 of {_item} from (slot event.getSlot() of inventory of {_dispenser})
        else:
            dispenserEventFail({_dispenser})
        exit trigger
