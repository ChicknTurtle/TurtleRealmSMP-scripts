
options:
    # Mobs that can be picked up by mob bundle
    AllowedMobs: allay, armadillo, bat, bee, cat, "chicken" parsed as entity type, cow, dolphin, fox, frog, goat, mooshroom, ocelot, panda, parrot, pig, polar bear, "rabbit" parsed as entity type, sheep, strider, villager, wolf

    # Baby mobs that can be picked up by mob bundle
    AllowedBabyMobs: camel, donkey, hoglin, horse, mule, sniffer, turtle

    # All entities can be picked up while in creative


when ready to load recipes:
    register shaped recipe:
        id: "turtle:mob_bundle"
        result: getItem("turtle:mob_bundle")
        shape: "s", "h"
        category: "equipment"
        ingredients:
            set ingredient of "s" to string
            set ingredient of "h" to getItem("turtle:ravager_hide")

local function pickupMob(event:object, e:entity, tool:item) :: item:
    set {_p} to {_event}.getPlayer()
    # check if allowed mob
    if all:
        ({@AllowedMobs} and {@AllowedBabyMobs}) doesn't contain {_e}
        {_p}'s gamemode isn't creative
    then:
        exit trigger
    if all:
        age of {_e} >= 0
        ({@AllowedMobs}) doesn't contain {_e}
        {_p}'s gamemode isn't creative
    then:
        exit trigger
    # pickup mob
    {_event}.setCancelled(true)
    set {_fill} to (((spawn item of {_e}) ? barrier) with nbt from "{components:{max_stack_size:1}}")
    set {_nbt} to nbt of {_e}
    set compound tag "bundled" of custom nbt of {_tool} to {_nbt}
    set string tag "bundled_type" of custom nbt of {_tool} to str({_e}.getType().getKey())
    if int tag "SleepingX" of full nbt of {_e} is set:
        set {_x} to int tag "SleepingX" of full nbt of {_e}
        set {_y} to int tag "SleepingY" of full nbt of {_e}
        set {_z} to int tag "SleepingZ" of full nbt of {_e}
        set {_bedLoc} to location({_x},{_y},{_z})
        set blockdata tag "occupied" of block at {_bedLoc} to false
    delete (entity within {_e})
    set bundle contents of {_tool} to {_fill}
    set lore of {_tool} to "ยง8Contains: %type of {_e}%"
    # play sound
    play sound "minecraft:item.bundle.insert" at {_p}
    # grant advancement
    if all:
        {_e} is a villager
        age of {_e} < 0
    then:
        grantAdvancement("turtle:adventure/kidnapping", {_p})
    return {_tool}

local function throwMob(event:object, e:entity, tool:item) :: item:
    set {_p} to {_event}.getPlayer()
    custom nbt of {_tool} has tag "bundled"
    {_event}.setCancelled(true)
    set {_nbt} to compound tag "bundled" of custom nbt of {_tool}
    # spawn mob
    delete tag "Pos" of {_nbt}
    delete tag "Rotation" of {_nbt}
    delete tag "Motion" of {_nbt}
    delete tag "FallDistance" of {_nbt}
    delete tag "UUID" of {_nbt}
    delete tag "SleepingX" of {_nbt}
    delete tag "SleepingY" of {_nbt}
    delete tag "SleepingZ" of {_nbt}
    delete tag "TileX" of {_nbt}
    delete tag "TileY" of {_nbt}
    delete tag "TileZ" of {_nbt}
    set {_loc} to location 1 block above {_p}'s location
    mc spawn (minecraft entity type from key (string tag "bundled_type" of custom nbt of {_tool})) at {_loc}:
        add {_nbt} to full nbt of event-entity
        set {_size} to event-entity.getBoundingBox().getVolume()
        set {_force} to max(0.75,1.5-{_size})
        push event-entity forward with force {_force}
        add {_p}'s velocity to event-entity's velocity
    # remove nbt
    delete tag "minecraft:bundle_contents" of (nbt of {_tool})
    delete tag "bundled" of (custom nbt of {_tool})
    delete tag "bundled_type" of (custom nbt of {_tool})
    clear lore of {_tool}
    # play sound
    play sound "minecraft:item.bundle.drop_contents" at {_p}
    return {_tool}

local function mobBundle(event:object, e:entity):
    set {_p} to {_event}.getPlayer()
    if {_event}.getHand() is off hand slot:
        set {_tool} to {_p}'s offhand tool
    else:
        set {_tool} to {_p}'s tool
    getId({_tool}) is "turtle:mob_bundle"
    if all:
        # bundle is empty
        full nbt of {_tool} doesn't have tag "components;minecraft:bundle_contents"
        # don't pickup dying mobs
        {_e} is set
        {_e} is alive
    then:
        set {_tool} to pickupMob({_event}, {_e}, {_tool}) ? {_tool}
    else:
        set {_tool} to throwMob({_event}, {_e}, {_tool}) ? {_tool}
    if {_event}.getHand() is off hand slot:
        set {_p}'s offhand tool to ({_tool} ? {_p}'s tool)
    else:
        set {_p}'s tool to ({_tool} ? {_p}'s tool)

on right click:
    mobBundle(event, clicked entity)

import:
    org.bukkit.event.player.PlayerInteractEvent

# cancel bundle spitting out item
on PlayerInteractEvent:
    str(event.action) isn't "PHYSICAL"
    set {_p} to event.getPlayer()
    if event.getHand() is off hand slot:
        set {_tool} to {_p}'s offhand tool
    else:
        set {_tool} to {_p}'s tool
    getId({_tool}) is "turtle:mob_bundle"
    custom nbt of {_tool} has tag "bundled"
    cancel event

# cancel bundle in inventory
on inventory click:
    if click type is right mouse button:
        if getId(event-item) is "turtle:mob_bundle":
            player's cursor slot is air
            custom nbt of event-item has tag "bundled"
            cancel event
        if getId(player's cursor slot) is "turtle:mob_bundle":
            event-item is air
            custom nbt of player's cursor slot has tag "bundled"
            cancel event
