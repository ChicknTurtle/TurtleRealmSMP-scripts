
on load:
    set {-features::dropskull::name} to "Drop skull"
    set {-features::dropskull::desc} to "When slain by another player, your head will be dropped"
    set {-features::dropskull::icon} to player head
    set {-features::protectdeathloot::name} to "Protect death loot"
    set {-features::protectdeathloot::desc} to "Whether player death drops should be protected\nSee 'Protected items' to fully disable protected items"
    set {-features::protectdeathloot::icon} to chest

on join:
    set {-playerdata::%player%::lastonground} to 1
    set {-playerdata::%player%::lastmoved} to now

on player tick:
    # last on ground
    add 1 to {-playerdata::%player%::lastonground}
    if player is on ground:
        set {-playerdata::%player%::lastonground} to 0
    
    # last moved
    if any:
        player is pressing jump key
        player is pressing sneak key
        player is pressing forward key
        player is pressing backward key
        player is pressing left key
        player is pressing right key
    then:
        set {-playerdata::%player%::lastmoved} to now
    
    # afk, name pain
    if any:
        player's gamemode is creative
        player's gamemode is spectator
    then:
        set {_health} to 1
    else:
        set {_health} to player's health/player's max health
    set {_health} to round({_health}*255)
    set {_gb} to {_health}
    set {_r} to 255
    if {-playerdata::%player%::lastmoved} < (now - 5 minutes):
        set {_r} to round({_r}/2)
        set {_gb} to round({_gb}/2)
    set {_hex} to rgbToHex({_r}, {_gb}, {_gb})
    set {_name} to colored "<%{_hex}%>%player's name%"
    set player's tablist name to {_name}
    
    # tablist
    updateTablist(player)

# handle player death
on death of player:
    set {_e} to enchantment from key "turtle:soulbound"
    event.getKeepInventory() is false
    set {_drops::*} to ...event.getDrops()
    event.getDrops().clear()
    # drop skull
    if {enabledFeatures::dropskull} is true:
        attacker is a player
        add (nbt skull of "%victim%").getRandom() to {_drops::*}
    # cookie
    if (lowercase name of victim) contains "cookie":
        add cookie to {_drops::*}
    loop {_drops::*}:
        # soulbound
        if loop-value is enchanted with {_e}:
            event.getItemsToKeep().add(loop-value)
        # protected items
        else:
            if {enabledFeatures::protectdeathloot} is true:
                event.getDrops().add(protectItemStack(loop-value))
            else:
                event.getDrops().add(loop-value)
